plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.103'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = mod_version
group = mod_group_id

repositories {
    maven { url = uri("https://repo.neoforged.dev/releases") }
    mavenCentral()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        data {
            clientData()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// shadowImplementation の依存関係をランタイムクラスパスに追加


// 解決可能なコンフィグレーションを作成
configurations {
    // implementationを拡張する解決可能なコンフィグレーション
    shadowImplementation {
        extendsFrom implementation
        canBeResolved = true
        canBeConsumed = false
    }
}
sourceSets {
    main {
        runtimeClasspath += configurations.shadowImplementation
    }
}
dependencies {
    // SLF4J APIとSimple（JARに含める）
    //implementation 'org.slf4j:slf4j-api:2.0.9'
    //implementation 'org.slf4j:slf4j-simple:2.0.9'


    // JUnit（テスト専用、JARに含めない）
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // MongoDB Driver（JARに含める）
    implementation 'org.mongodb:mongodb-driver-sync:5.3.1'
    additionalRuntimeClasspath "org.mongodb:mongodb-driver-sync:5.3.1"
    shadowImplementation 'org.mongodb:mongodb-driver-sync:5.3.1'




}


sourceSets.main.resources { srcDir 'src/generated/resources' }

// shadowJarの設定
shadowJar {
    archiveClassifier.set('') // Forgeが読み込むMODファイルとして使う
    configurations = [project.configurations.shadowImplementation]
    mergeServiceFiles() // META-INF/services/* をマージして競合を防ぐ
    exclude 'META-INF/versions/**'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}


tasks.named('build') {
    dependsOn shadowJar
}


var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
            artifact shadowJar // Shadow JARを公開
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}


